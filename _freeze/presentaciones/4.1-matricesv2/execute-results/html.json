{
  "hash": "6e022dbb1db64a846553fe64669bdbf0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Matrices en Ecología\"\nauthor: \"Gabriel Massaine Moulatlet\"\ninstitute: Instituto de Ecología, A.C.\nformat:\n  revealjs:\n    slide-number: true\n    embed-resources: true\neditor: visual\nhighlight-style: arrow-light\n---\n\n::: {.cell}\n\n:::\n\n\n\n# Matrices\n\n## Matrices\n\n![](https://i.imgflip.com/lnf8o.jpg)\n\n## \n\n-   Es el formato más comun de representación de datos ecológicos\n-   Más popular en ecología con el desarollo de mejores computadoras\n-   Gran parte del lenguaje de los softwares está basada en notaciones de matrices\n\n## Son muy usadas en los análisis de ecologia\n\n-   Análisis multivariados en ecologia de comunidades\n-   Para resumir grandes conjuntos de datos\n-   Comunes en macroecología (matriz de presencia-ausencia)\n-   Correlación entre variables\n\n## Matrices en R\n\n-   `matrix()`vs. `data.frame()` vs. `array()`\n-   `matrix()`: solo numeros o solo caracteres\n-   `data.frame()`: mix de tipos numeros y caracteres\n-   `array()` son *n*-dimensionales\n\n## Estructura de la matriz\n\n-   Una matriz es un tipo especial de `array()`\n-   Una matriz tiene 2 dimensiones, formadas por filas y columnas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix(data=NA, nrow = 2, ncol=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]   NA   NA\n[2,]   NA   NA\n```\n\n\n:::\n:::\n\n\n\n## Diferencias entre `matrix()` y `array()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- matrix(1:6, ncol = 3, nrow = 2)\nb <- array(1:12, c(2, 3, 4))\n```\n:::\n\n\n\n## \n\n::::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- matrix(1:6, ncol = 3, nrow = 2)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- array(1:12, c(2, 3, 4))\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    7    9   11\n[2,]    8   10   12\n\n, , 3\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n, , 4\n\n     [,1] [,2] [,3]\n[1,]    7    9   11\n[2,]    8   10   12\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## Argumentos de la función `matrix()`\n\n-   *dimnames*\n-   Una lista con los nombres de las filas y de las columnas, respectivamente\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix(data=NA, nrow = 2, ncol=2,dimnames = list(c(\"row1\",\"row2\"),\n                                                 c(\"col1\", \"col2\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     col1 col2\nrow1   NA   NA\nrow2   NA   NA\n```\n\n\n:::\n:::\n\n\n\n## Llenado de matriz\n\n-   *byrow*\n-   Define como se da el llenado de la matrix\n-   Si `byrow=T`, el llenado se da por filas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec = c(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\")\nmatrix(vec, nrow = 3, byrow = T )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,] \"a\"  \"b\" \n[2,] \"c\"  \"d\" \n[3,] \"e\"  \"f\" \n```\n\n\n:::\n:::\n\n\n\n## Si `byrow=F`, el llenado se da por columnas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec = c(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\")\nmatrix(vec, nrow = 3, byrow = F )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,] \"a\"  \"d\" \n[2,] \"b\"  \"e\" \n[3,] \"c\"  \"f\" \n```\n\n\n:::\n:::\n\n\n\n## `diag()`\n\n-   Es la función para extraer la diagonal de una matriz\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- matrix(1:6, ncol = 3, nrow = 2)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n\n\n:::\n\n```{.r .cell-code}\ndiag(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 4\n```\n\n\n:::\n:::\n\n\n\n# Algebra de matrices\n\n## La matriz\n\n![](imgs/matrix.jpg)\n\n## Diferentes tipos de matrices\n\n-   Cuadrada (número de filas igual al numero de columnas)\n-   Diagonal (todos valores además de las diagonal son ceros)\n-   Triangular (valores en cero en una de las mitades)\n-   Identidad (valores de la diagonal son 1 y los demás, 0)\n-   Escalar (valores de la diagonal son iguales y los demás, 0)\n\n## \n\n![](imgs/matrices.png)\n\n## Operaciones con matrices: Sumatoria\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n a <- matrix(1:9, nrow=3)\n b <- diag(rep(1,3))\n\n a\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n\n\n:::\n\n```{.r .cell-code}\n b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n```\n\n\n:::\n:::\n\n\n\n## \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n a <- matrix(1:9, nrow=3)\n b <- diag(rep(1,3))\n\n a + b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    2    4    7\n[2,]    2    6    8\n[3,]    3    6   10\n```\n\n\n:::\n:::\n\n\n\n## Operaciones con matrices: Diferencia\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n a <- matrix(1:9, nrow=3)\n b <- diag(rep(1,3))\n a\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n\n\n:::\n\n```{.r .cell-code}\n b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n```\n\n\n:::\n\n```{.r .cell-code}\n a - b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    0    4    7\n[2,]    2    4    8\n[3,]    3    6    8\n```\n\n\n:::\n:::\n\n\n\n## Operaciones con escalares\n\n::::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n a <- matrix(1:9, nrow=3)\n d <- c(0,0,1)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n\n\n:::\n\n```{.r .cell-code}\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 0 1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\na + d\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    4    7   10\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n a <- matrix(1:9, nrow=3)\n\n a + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    2    5    8\n[2,]    3    6    9\n[3,]    4    7   10\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## pero...\n\n::::: columns\n::: {.column width=\"50%\"}\n-   a + b y a + b2 son iguales?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n a <- matrix(1:9, nrow=3)\n b <- 1\n a\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n\n\n:::\n\n```{.r .cell-code}\n a + b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    2    5    8\n[2,]    3    6    9\n[3,]    4    7   10\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n-   Y esta suma, ¿sale bien?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n a <- matrix(1:9, nrow=3)\n b2 <- matrix(b, nrow=1)\n b2\n a + b2\n```\n:::\n\n\n:::\n:::::\n\n## Multiplicación de matrices\n\n-   El comando `%*%` se aplica par las multiplicaciones\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- matrix(1:4, nrow=2)\nb <- diag(rep(1,2))\nd <- matrix(c(0,1), nrow=2)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n```\n\n\n:::\n\n```{.r .cell-code}\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    0\n[2,]    0    1\n```\n\n\n:::\n\n```{.r .cell-code}\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]\n[1,]    0\n[2,]    1\n```\n\n\n:::\n:::\n\n\n\n## \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- matrix(1:4, nrow=2)\nb <- diag(rep(1,2))\nd <- matrix(c(0,1), nrow=2)\n\n a %*% b # ¿Salió bien?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n```\n\n\n:::\n:::\n\n\n\n## \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- matrix(1:4, nrow=2)\nb <- diag(rep(1,2))\nd <- matrix(c(0,1), nrow=2)\n\n a %*% d # ¿esta?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]\n[1,]    3\n[2,]    4\n```\n\n\n:::\n:::\n\n\n\n## \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- matrix(1:4, nrow=2)\nb <- diag(rep(1,2))\nd <- matrix(c(0,1), nrow=2)\n\n d %*% a # ¿y esta?\n```\n:::\n\n\n\n## La división de matrices no existe, se las multiplica por su inverso\n\n![](imgs/invma.png)\n\n## la función `det()`\n\n-   Para calcular el inverso es necesario conocer el *determinante*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- matrix(1:4, nrow=2)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n```\n\n\n:::\n\n```{.r .cell-code}\n(1*4) - (3*2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -2\n```\n\n\n:::\n:::\n\n\n\n## \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- det(a)\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -2\n```\n\n\n:::\n:::\n\n\n\n## \n\n-   Dividir cada elemento de la matriz inversa por por el determinante\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninva <-  matrix(c(4,-3,-2,1), nrow=2)\ninva\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    4   -2\n[2,]   -3    1\n```\n\n\n:::\n\n```{.r .cell-code}\n(4/det(a))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -2\n```\n\n\n:::\n\n```{.r .cell-code}\n(-3/det(a))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.5\n```\n\n\n:::\n\n```{.r .cell-code}\n(-2/det(a))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\n(1/det(a))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.5\n```\n\n\n:::\n:::\n\n\n\n## \n\n-   La función `solve()` calcula el inverso\n-   No confundir con `t()`, que es la función para transponer la matriz\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- matrix(1:4, nrow=2)\nainv <- solve(a)\nainv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]   -2  1.5\n[2,]    1 -0.5\n```\n\n\n:::\n:::\n\n\n\n## \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na %*% ainv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    0\n[2,]    0    1\n```\n\n\n:::\n:::\n\n\n\n## QUIZ\n\n-   Un pesticida tiene 2 compuestos tóxicos I y II que se acumulan en 3 especies de plantas A, B y C\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM = matrix(c(2,3,4,0,1,2), nrow=2,ncol=3,byrow=T,\n           dimnames = \n             list(c(\"I\",\"II\"),\n             c(\"A\", \"B\",\"C\")))\nM\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   A B C\nI  2 3 4\nII 0 1 2\n```\n\n\n:::\n:::\n\n\n\n## \n\n-   Si un herbívoro se alimenta de estas 3 especies en las seguientes cantidades por día:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN = matrix(c(5,3,1), nrow=3,ncol=1,byrow=F,\n           dimnames = list(c(\"A\",\"B\",\"C\")))\n\nN\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [,1]\nA    5\nB    3\nC    1\n```\n\n\n:::\n:::\n\n\n\n## \n\n-   ¿Cuántos contaminantes I y II consume diariamente?\n-   Tip: Mirar el producto de M x N\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM = matrix(c(2,3,4,0,1,2), nrow=2,ncol=3,byrow=T,\n           dimnames = list(c(\"I\",\"II\"),\n                                                                   c(\"A\", \"B\",\"C\")))\nN = matrix(c(5,3,1), nrow=3,ncol=1,byrow=F,\n           dimnames = list(c(\"A\",\"B\",\"C\")))\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n   [,1]\nI    23\nII    5\n```\n\n\n:::\n:::\n\n\n\n# Tipos de matriz en R\n\n## *Sparse* vs. *Dense* matrices\n\n-   paquete `Matrix`\n-   [Documentación](https://ocw.mit.edu/courses/18-335j-introduction-to-numerical-methods-spring-2019/bcd746dca8cbf0d5a890f01a72d8ef64_MIT18_335JS19_lec24.pdf)\n\n![](imgs/sparse_dense.gif){fig-align=\"center\"}\n\n## *Sparse* vs. *Dense* matrices\n\n-   Funciones aplicadas a ambos tipos de matrices producen los mismos resultados\n-   Ventajas en el tiempo de procesamiento de datos\n\n## \n\n::::: columns\n::: {.column width=\"50%\"}\n-   `Dense`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM <- matrix(10 + 1:28, 4, 7) # crear matrix\nM <- cbind(-1, M) # poner una columna con -1\nM[2, c(2,4:6)] <- 0 # agregar unos ceros\nM <- rbind(0, M, 0) #agregar más ceros\nM[1:2,2]  <- NA # agregar NAs\nM[2:6,8]  <- 0 # agregar otros ceros\nM\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n[1,]    0   NA    0    0    0    0    0    0\n[2,]   -1   NA   15   19   23   27   31    0\n[3,]   -1    0   16    0    0    0   32    0\n[4,]   -1   13   17   21   25   29   33    0\n[5,]   -1   14   18   22   26   30   34    0\n[6,]    0    0    0    0    0    0    0    0\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n-   `Sparse`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Matrix)\n\nsM <- as(M, \"sparseMatrix\")\nsM\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n6 x 8 sparse Matrix of class \"dgCMatrix\"\n                           \n[1,]  . NA  .  .  .  .  . .\n[2,] -1 NA 15 19 23 27 31 .\n[3,] -1  . 16  .  .  . 32 .\n[4,] -1 13 17 21 25 29 33 .\n[5,] -1 14 18 22 26 30 34 .\n[6,]  .  .  .  .  .  .  . .\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## En ecología de comunidades\n\n-   Matrices son usadas para guardar los elementos de analisis de diversidad\n-   Tiene muchos ceros (presencia-ausencia)\n-   R tiene que guardar cada valor en matrices del tipo *dense*\n-   Matrices del tipo *sparse* no guardan los ceros\n\n## Funciones útiles en el paquete `phyloregion`\n\n-   Para datos de comunidades (sitios x species)\n-   [Phyloregion](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.13478g)\n\n## \n\n![](imgs/phylo.jpg)\n\n## Matrices de distancia\n\n-   Pueden ser transformadas en objetos de distancias `dist()`\n-   Por defecto calcula distancias euclidianas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- matrix(1:6, nrow = 3)\ndist(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         1        2\n2 1.414214         \n3 2.828427 1.414214\n```\n\n\n:::\n:::\n\n\n\n## \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\n\n\n## Funciones del paquete `vegan()`\n\n-   Análisis comunes en ecología de comunidades usan el formato *dist*\n-   [vegdist()](https://www.rdocumentation.org/packages/vegan/versions/2.6-4/topics/vegdist)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vegan)\n\ndata(varespec)\n\nvare.dist <- vegdist(varespec)\nvare.dist\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          18        15        24        27        23        19        22\n15 0.5310021                                                            \n24 0.6680661 0.3597783                                                  \n27 0.5621247 0.4055610 0.4934947                                        \n23 0.3747078 0.3652097 0.5020306 0.4286111                              \n19 0.5094738 0.4560757 0.5092318 0.4878190 0.3606242                    \n22 0.6234419 0.3579517 0.5010050 0.4655224 0.4812706 0.4726483          \n16 0.5337610 0.3976674 0.5907623 0.5683930 0.4094312 0.4496731 0.2678031\n28 0.8418209 0.5225414 0.5736665 0.3027802 0.6979519 0.6431734 0.5985666\n13 0.3453347 0.6063846 0.7576747 0.7543736 0.6221471 0.5739244 0.6948736\n14 0.5449810 0.4803756 0.6533606 0.7467915 0.5645808 0.6331942 0.5357609\n20 0.3879069 0.3784188 0.4346892 0.4957833 0.2877014 0.3953776 0.4627020\n25 0.6318891 0.3376115 0.3369098 0.5001593 0.4258617 0.4311299 0.3822981\n7  0.3603697 0.6717391 0.7931069 0.7792917 0.6390838 0.6958570 0.7459886\n5  0.4955699 0.7178612 0.8561753 0.8732190 0.7295255 0.7898205 0.8611451\n6  0.3382309 0.6355122 0.7441373 0.7496935 0.6252483 0.5684030 0.7249162\n3  0.5277480 0.7578503 0.8382119 0.8090236 0.7128798 0.5302756 0.8026152\n4  0.4694018 0.6843974 0.8309875 0.8413800 0.7117919 0.5177604 0.8015314\n2  0.5724092 0.8206269 0.8372551 0.7581924 0.7249869 0.5389222 0.8321464\n9  0.6583569 0.7761039 0.7590517 0.7415898 0.6693889 0.5393143 0.7725082\n12 0.4688038 0.6794199 0.6894538 0.6253616 0.5384762 0.4288556 0.7051751\n10 0.6248996 0.7644564 0.7842829 0.7096540 0.6625476 0.5059910 0.7875328\n11 0.4458523 0.4716274 0.5677373 0.6322919 0.4710280 0.3293493 0.5812219\n21 0.5560864 0.7607281 0.7272727 0.5456001 0.4951221 0.5315894 0.6771167\n          16        28        13        14        20        25         7\n15                                                                      \n24                                                                      \n27                                                                      \n23                                                                      \n19                                                                      \n22                                                                      \n16                                                                      \n28 0.7015360                                                            \n13 0.5514941 0.8600122                                                  \n14 0.4826350 0.8239667 0.5547565                                        \n20 0.3737797 0.6963560 0.5785542 0.5115258                              \n25 0.4306058 0.6086150 0.7412605 0.5541517 0.4518556                    \n7  0.6596144 0.8960202 0.4533054 0.6550830 0.5959162 0.7556726          \n5  0.7184789 0.9539592 0.5148988 0.7257681 0.7153827 0.8600858 0.3237446\n6  0.6509879 0.9014440 0.3515673 0.6227473 0.5439118 0.7343872 0.1754713\n3  0.6837953 0.9234485 0.4965478 0.7836661 0.6690479 0.8168684 0.5154487\n4  0.6462648 0.9381169 0.3881748 0.6734743 0.6771854 0.8400134 0.5601721\n2  0.7354202 0.9053213 0.5968691 0.8592489 0.6951539 0.8179089 0.6465777\n9  0.8185866 0.8686670 0.7292530 0.8282497 0.6982486 0.7884243 0.8318435\n12 0.6342166 0.8543167 0.5902386 0.7507074 0.5182426 0.7062564 0.6991666\n10 0.7656598 0.9016604 0.7160439 0.8304088 0.6706349 0.7845955 0.7697453\n11 0.5172825 0.7544064 0.4272808 0.6743277 0.4461712 0.6175930 0.5262233\n21 0.7474559 0.7248773 0.7212772 0.8096450 0.6320431 0.7466232 0.7933350\n           5         6         3         4         2         9        12\n15                                                                      \n24                                                                      \n27                                                                      \n23                                                                      \n19                                                                      \n22                                                                      \n16                                                                      \n28                                                                      \n13                                                                      \n14                                                                      \n20                                                                      \n25                                                                      \n7                                                                       \n5                                                                       \n6  0.3984538                                                            \n3  0.5634432 0.4517627                                                  \n4  0.5377506 0.4665100 0.3592689                                        \n2  0.7257597 0.5552754 0.2099203 0.4841145                              \n9  0.9014583 0.7223126 0.3885811 0.6222340 0.2330286                    \n12 0.7808641 0.5762462 0.2641851 0.4870742 0.1846147 0.2277228          \n10 0.8504191 0.6567926 0.3413378 0.5776062 0.1456729 0.1117280 0.1793368\n11 0.5563798 0.4077948 0.3002597 0.3215966 0.4209596 0.5145260 0.3688102\n21 0.8888316 0.6720141 0.7507773 0.7641304 0.6779661 0.5952563 0.5602137\n          10        11\n15                    \n24                    \n27                    \n23                    \n19                    \n22                    \n16                    \n28                    \n13                    \n14                    \n20                    \n25                    \n7                     \n5                     \n6                     \n3                     \n4                     \n2                     \n9                     \n12                    \n10                    \n11 0.5043578          \n21 0.6147874 0.6713363\n```\n\n\n:::\n:::\n\n\n\n## Transformar objetos `dist()` en objetos de formato *ancho*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(tidyverse)\n\nx <- matrix(1:6, nrow = 3)\ndx = dist(x)\n```\n:::\n\n\n\n## \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndx |> \n  as.matrix() |> \n  as.data.frame() |> \n  mutate(sites = c(\"1\",\"2\",\"3\")) |> \n  pivot_longer(cols = c(1:3),\n               names_to = \"sites2\",\n               values_to = \"distances\") |> \n  \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  sites sites2 distances\n  <chr> <chr>      <dbl>\n1 1     1           0   \n2 1     2           1.41\n3 1     3           2.83\n4 2     1           1.41\n5 2     2           0   \n6 2     3           1.41\n```\n\n\n:::\n:::\n\n\n\n# Visualización de matrices\n\n## Visualizar datos crudos\n\n![](imgs/warton.png)\n\n## Uso de gráficos *genéricos*\n\n-   A partir de una matriz de species x sitios\n-   Nos permiten visualizar patrones de la comunidad\n-   Asociar los patrones a teorias ecológicas\n\n## Gausch 1982\n\n![](imgs/DA4.png)\n\n## Hacer gráficos genéricos\n\n![](imgs/DA.png)\n\n## Uso de análisis de gradientes (in)directos\n\n![](imgs/DA2.png)\n\n## Interpretación de los resultados\n\n![](imgs/DA3.png)\n\n## Cálculo de gradiente directo\n\n![](imgs/DA5.png)\n\n## Ejemplo usando dados de abundancia de moluscos\n\n-   Importar el archivo `moluscos.txt`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(here)\nmoluscos = read_table(file=here(\"dados\",\"moluscos.txt\"))\n\n\n# importar los datos ambientales\nambi = read_table(file=here(\"dados\",\"ambi.txt\"))\n```\n:::\n\n\n\n## Editar la tabla de moluscos, quitar la columna \"sites\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nmoluscos <- \n  moluscos |> \n    select(c(sp1:sp6))\nmoluscos\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 6\n     sp1   sp2   sp3   sp4   sp5   sp6\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1    10     9    15     2     1     0\n 2     0     0     0     0    13    12\n 3     7     4     0     0     0     0\n 4     0     1     0     3    14    20\n 5     0     0     0    10     8     6\n 6     0     0     2     5     4     0\n 7     0     4    11     0     0     0\n 8     0     0     7     3     0     0\n 9     0     0     0     9     5     0\n10     0     0     1    15    10     8\n```\n\n\n:::\n:::\n\n\n\n## calcular las medias\n\n-   Usar el gradiente de precipitacion\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmolu.medias <-colSums(moluscos*ambi$lluvia)/colSums(moluscos)\n```\n:::\n\n\n\n-   Ordenar las filas de acuerdo con el gradiente ambiental y con las medias\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmolu.ord<-moluscos[order(ambi$lluvia,decreasing=F),]\nmolu.ord1<-molu.ord[,order(molu.medias,decreasing=T)]\n```\n:::\n\n\n\n## Visualizar\n\n-   Algunos ajustes..\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nambi2 <- ambi[order(ambi$lluvia,decreasing=F),]\n\nmolu.ord2 <- cbind(molu.ord1,ambi2)\n```\n:::\n\n\n\n## \n\n-   Qué vemos en la gráfica abajo? Hay algun patrón?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmolu.ord2 |> \n  pivot_longer(cols = c(sp1:sp6)) |> \n  ggplot(aes(x=factor(lluvia),y=fct_rev(name),size=ifelse(value==0,NA,value)))+\n  geom_point(shape=15)\n```\n\n::: {.cell-output-display}\n![](4.1-matricesv2_files/figure-revealjs/unnamed-chunk-43-1.png){width=960}\n:::\n:::\n\n\n\n## Otras opiciones de gráficos genéricos\n\n-   Ver el github de Cristian Dambros, de la UFSM-BRA\n-   La función [poncho](https://raw.githubusercontent.com/csdambros/R-functions/master/poncho.R)\n-   para llamar la función directamente a su script usar: source(\"https://raw.githubusercontent.com/csdambros/R-functions/master/poncho.R\")\n\n## \n\n![](imgs/poncho.png)\n\n## Cuando no hay variables ambientales\n\n-   Igual se pueden ordenar las matrices para visualizar los patrones\n-   *Indirect* gradient analysis\n-   De este tipo se análisis se derivan técnicas más complejas como RA, CA y PCA\n\n## En Resumen\n\n![](imgs/whatever.jpg)\n\n## No, voy en serio!\n\n-   La matriz es una de los formatos esenciales para los analisis ecológicos\n-   Manejar y visualizar información de matrices puede revelar informaciones importantes de los datos incluso antes de los análisis\n",
    "supporting": [
      "4.1-matricesv2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}